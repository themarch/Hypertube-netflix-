{
  "_from": "untegrity",
  "_id": "untegrity@1.0.7",
  "_inBundle": false,
  "_integrity": "sha512-Xwzins22IC5mtDkvNCc8IaUV2AaFPSGe53QS9ocygQbPEt/eZsXhPn9Yhsx2od+bkXKIwVN6dWe3HzOSzqF4EQ==",
  "_location": "/untegrity",
  "_phantomChildren": {
    "decamelize": "1.2.0",
    "find-up": "3.0.0",
    "get-caller-file": "1.0.3",
    "minimist": "0.0.8",
    "os-locale": "3.1.0",
    "require-directory": "2.1.1",
    "require-main-filename": "1.0.1",
    "set-blocking": "2.0.0",
    "string-width": "2.1.1",
    "strip-ansi": "4.0.0",
    "which-module": "2.0.0",
    "wrap-ansi": "2.1.0",
    "y18n": "4.0.0",
    "yargs-parser": "11.1.1"
  },
  "_requested": {
    "escapedName": "untegrity",
    "fetchSpec": "latest",
    "name": "untegrity",
    "raw": "untegrity",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/untegrity/-/untegrity-1.0.7.tgz",
  "_shasum": "7add066efa4d672e28558795deea184e1d8e021b",
  "_spec": "untegrity",
  "_where": "/Volumes/Storage/goinfre/yvmartor/hypertube/test-express",
  "author": {
    "name": "L1lith"
  },
  "bin": {
    "untegrity": "cli/index.js"
  },
  "bugs": {
    "url": "https://github.com/L1lith/Untegrity/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "colors": "^1.3.2",
    "mkdirp": "^0.5.1",
    "mz": "^2.7.0",
    "nanoid": "^2.0.0",
    "node-dir": "^0.1.17",
    "path-type": "^3.0.0",
    "pm2": "^3.2.2",
    "rimraf": "^2.6.2",
    "yargs": "^12.0.5"
  },
  "deprecated": false,
  "description": "Discipline videos with poor integrity",
  "devDependencies": {},
  "homepage": "https://github.com/L1lith/Untegrity#readme",
  "keywords": [
    "check",
    "checker",
    "ffmpeg",
    "integrity",
    "validate",
    "validator",
    "video"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "untegrity",
  "optionalDependencies": {},
  "readme": "# Untegrity\r\nCommand line tool & node package for detecting and optionally removing corrupt videos one at a time or in mass.\r\n## Installation\r\nFirst install FFMPEG ([Found Here](http://ffmpeg.zeranoe.com/builds/)) and ensure it's path is set in your environment variables. You can test this by simply running  the command `ffmpeg`\r\n\r\nFor usage from within a Node.js project\r\n```\r\nnpm i -s untegrity\r\n```\r\nFor command line usage\r\n```\r\nnpm i -g untegrity\r\n```\r\n\r\n## Command Line Basics\r\nCommands are formatted like this\r\n```\r\nuntegrity path [...options]\r\n```\r\nWe can check the integrity of a given video file like this, also it can accept folders instead.\r\n```\r\nuntegrity ./video.mp4\r\n```\r\nHere's an example of recursively searching through directories and deleting the corrupt video files using audio content validation\r\n```\r\nuntegrity . -dra\r\n```\r\n\r\n## Node.js Basics\r\nWe can check the integrity of a video like this\r\n```\r\nconst {checkIntegrity} = require('untegrity')\r\nconst join = require('join')\r\n\r\nasync function run() {\r\n\tconst valid = await checkIntegrity(join(__dirname, 'video.mp4'))\r\n\tif (valid) {\r\n\t\tconsole.log(\"Video Valid!)\r\n\t} else {\r\n\t\tconsole.log(\"Video Invalid :(\")\r\n\t}\r\n}\r\n\r\nrun().catch(console.log)\r\n```\r\n## Command Line Arguments\r\n\r\n*Usage*\r\n```\r\nuntegrity videoPath [-t --type | --type] [-r | --recursive] [-d | --rm | --del | --remove | --delete] [-a | --audio | --audioMode] [--noBanner]\r\n```\r\n| Flag | Description                                                                                  |\r\n|------|----------------------------------------------------------------------------------------------|\r\n|  -r  | If doing a folder search check subdirectories recursively                                    |\r\n|  -t  | Specify either a video or folder path type to prevent unwanted behavior                      |\r\n|  -d  | Delete corrupt videos found.                                                                 |\r\n|  -a  | Run in Audio Mode (Videos validated via audio tracks, potentially inaccurate but much faster)|\r\n| --noBanner | If you don't love beautiful ascii art ;(                                               |\r\n\r\n## Node.js Methods\r\n### checkIntegrity\r\nChecks the integrity of a single video\r\n\r\nUsage\r\n```\r\nconst {checkIntegrity} = require('untegrity')\r\nconst {join} = require('path')\r\n\r\ncheckIntegrity(join(__dirname, './movie.mp4')).then(valid => {\r\n\tif (valid) {\r\n\t\tconsole.log(\"Video Valid\")\r\n\t} else {\r\n\t\tconsole.log(\"Video Invalid\")\r\n\t}\r\n}).catch(console.log)\r\n```\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/L1lith/Untegrity.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.0.7"
}
